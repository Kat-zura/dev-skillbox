==============================
📦 Python 基础语法与数据结构
==============================

🔹 不可变对象：int, str, tuple
🔸 可变对象：list, dict, set

🔹 列表 list：[]                             # 可变序列
🔹 元组 tuple：()                            # 不可变序列
🔹 字典 dict：{key: value}                   # 键必须是不可变对象
🔹 集合 set：{} 或 set()                     # 无序去重集合

==============================
🧮 函数参数类型与定义方式
==============================

- 必选参数                                 # 必须传入
- 默认参数                                 # 有默认值，必须放在后面，且指向不可变对象
- 可变参数 *args                            # 接收 tuple
- 关键字参数 **kw                           # 接收 dict
- 命名关键字参数                            # 在 * 后定义，必须使用关键字传入

==============================
🔧 内置函数与常用操作
==============================

abs(x)                                      # 绝对值
hex(x)                                      # 十六进制
isinstance(x, T)                            # 类型判断
sorted(list, key=..., reverse=True/False)  # 排序

map(func, iterable)                         # 映射
filter(func, iterable)                      # 过滤
reduce(func, iterable)                      # 归约（需导入 functools）

open()                                      # 打开文件
with open(...) as f:                        # 文件上下文管理

==============================
✂️ 切片操作（适用于 list, tuple, str）
==============================

[start:end:step]                            # 起始、结束、步长

==============================
🔁 迭代与枚举
==============================

for i, element in enumerate(list):          # 获取索引和值
for k, v in dict.items():                   # 遍历字典键值对

==============================
🧪 列表生成式
==============================

[x * x for x in range(10)]                  # 基本形式
[x if condition else y for x in iterable]   # 条件表达式在前
[x for x in iterable if condition]          # 条件表达式在后

==============================
⚙️ 生成器与 yield
==============================

g = (x * x for x in range(10))              # 生成器表达式
for i in g:                                 # 使用 for 循环迭代

def gen():                                  # 使用 yield 构造生成器函数
    yield x

==============================
🔒 闭包与作用域
==============================

def outer():
    x = 0
    def inner():
        nonlocal x                          # 引用外部变量
        x += 1
        return x
    return inner

==============================
🧙 匿名函数 lambda
==============================

lambda x: x * x                             # 简洁函数表达式

==============================
🎀 装饰器 decorator
==============================

def decorator(func):
    def wrapper(*args, **kw):
        return func(*args, **kw)
    return wrapper

@decorator
def my_func():
    ...

==============================
🧩 偏函数 functools.partial
==============================

from functools import partial

int2 = partial(int, base=2)                 # 固定参数 base=2
int2('10010')                               # 相当于 int('10010', base=2)

max2 = partial(max, 10)                     # 固定第一个参数为 10
max2(5, 6)                                  # 相当于 max(10, 5, 6)

==============================
🧠 模式匹配（Python 3.10+）
==============================

match value:
    case 1:                                 # 匹配常量
        ...
    case [x, y]:                            # 匹配列表结构
        ...
    case {"key": val}:                      # 匹配字典结构
        ...

==============================
🏷 面向对象编程
==============================

- 封装、继承、多态
- 类的属性与方法
- __变量名：私有变量
- __slots__ = ()                            # 限制实例属性
- @property                                 # 属性装饰器

==============================
🛠 错误处理机制
==============================

try:
    ...
except Exception as e:
    ...
finally:
    ...

==============================
📦 常用内置模块
==============================

os           # 操作系统接口
pickle       # 对象序列化
json         # JSON 编码与解码
re           # 正则表达式
datetime     # 日期时间处理
collections  # 高级容器数据类型
pillow       # 图像处理
requests     # 网络请求
chardet      # 编码检测

==============================
⚙️ 并发编程：进程与线程
==============================

multiprocessing  # 多进程模块
threading        # 多线程模块

- CPU 密集型任务：推荐使用多进程
- IO 密集型任务：推荐使用多线程

==============================
✅ 备注与补充
==============================

- 默认参数必须指向不可变对象
- 可变参数在前，默认参数在后
- 字典的 key 必须是不可变对象
- Python 是动态语言，鸭子类型使得继承不是必须的

正则表达式(Regular Expression)

正则表达式由普通字符与特殊字符(元字符组成)

常用元字符如下
元字符	名称	描述	示例
.	点	匹配除换行符以外的任意单个字符。	a.c 能匹配 "abc", "a_c", "a2c"
\d	数字	匹配任意一个数字（等价于 [0-9]）。	\d\d 能匹配 "12", "99"
\D	非数字	匹配任意一个非数字字符。	\D 能匹配 "a", " ", "&"
\w	单词字符	匹配任意一个字母、数字或下划线（等价于 [a-zA-Z0-9_]）。	\w\w 能匹配 "a1", "_b"
\W	非单词字符	匹配任意一个非字母、数字或下划线的字符。	\W 能匹配 " ", "*", "@"
\s	空白字符	匹配任意一个空白字符（空格、制表符、换行符等）。	hello\sworld 能匹配 "hello world"
\S	非空白字符	匹配任意一个非空白字符。	\S+ 能匹配 "word123"
[]	字符集	匹配方括号中包含的任意一个字符。	[aeiou] 能匹配任何一个元音字母
^	开头锚点	匹配字符串的开头位置。	^start 能匹配 "start of line"
$	结尾锚点	匹配字符串的结尾位置。	end$ 能匹配 "line ends"
*	量词	匹配前面的元素 0 次或多次。	ab*c 能匹配 "ac", "abc", "abbbc"
+	量词	匹配前面的元素 1 次或多次。	ab+c 能匹配 "abc", "abbbc"，但不能匹配 "ac"
?	量词	匹配前面的元素 0 次或 1 次。	colou?r 能匹配 "color" 和 "colour"

# 使用r"", 避免 \ 和 Python 自身的转义规则冲突（例如 \n 在普通字符串中是换行符，但在 r'\n' 中就是反斜杠加字母n）。
# 强烈建议在 Python 中写正则表达式时都加上 r 前缀。